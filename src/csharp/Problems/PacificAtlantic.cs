//https://leetcode.com/problems/pacific-atlantic-water-flow/

namespace LeetCode.Problems;

public sealed class PacificAtlantic : ProblemBase
{
    [Theory]
    [ClassData(typeof(PacificAtlantic))]
    public override void Test(object[] data) => base.Test(data);

    public override void AddTestCases()
        => Add(it => it.ParamMatrix("[[1,2,2,3,5],[3,2,3,4,4],[2,4,5,3,1],[6,7,1,4,5],[5,1,1,2,4]]").ResultMatrix("[[0,4],[1,3],[1,4],[2,2],[3,0],[3,1],[4,0]]"))
          .Add(it => it.ParamMatrix("[[1,2,2,3,5],[3,2,3,4,4],[2,4,2,3,1],[6,7,7,4,5],[5,1,1,2,4]]").ResultMatrix("[[0,4],[1,3],[1,4],[3,0],[3,1],[3,2],[4,0]]"))
          .Add(it => it.ParamMatrix("[[13],[4],[19],[10],[1],[11],[5],[17],[3],[10],[1],[0],[1],[4],[1],[3],[6],[13],[2],[16],[7],[6],[3],[1],[9],[9],[13],[10],[9],[10],[6],[2],[11],[17],[13],[0],[19],[7],[13],[3],[9],[2]]").ResultMatrix("[[0,0],[1,0],[2,0],[3,0],[4,0],[5,0],[6,0],[7,0],[8,0],[9,0],[10,0],[11,0],[12,0],[13,0],[14,0],[15,0],[16,0],[17,0],[18,0],[19,0],[20,0],[21,0],[22,0],[23,0],[24,0],[25,0],[26,0],[27,0],[28,0],[29,0],[30,0],[31,0],[32,0],[33,0],[34,0],[35,0],[36,0],[37,0],[38,0],[39,0],[40,0],[41,0]]"))
          .Add(it => it.ParamMatrix("[[1,2,2,3,5],[3,2,3,4,4],[2,4,5,3,1],[6,7,1,4,5],[5,1,1,2,4]]").ResultMatrix("[[0,4],[1,3],[1,4],[2,2],[3,0],[3,1],[4,0]]"))
          .Add(it => it.ParamMatrix("[[3,3,3,3,3,3],[3,0,3,3,0,3],[3,3,3,3,3,3]]").ResultMatrix("[[0,0],[0,1],[0,2],[0,3],[0,4],[0,5],[1,0],[1,2],[1,3],[1,5],[2,0],[2,1],[2,2],[2,3],[2,4],[2,5]]"))
          .Add(it => it.ParamMatrix("[[1,1],[1,1],[1,1]]").ResultMatrix("[[0,0],[0,1],[1,0],[1,1],[2,0],[2,1]]"))
          .Add(it => it.ParamMatrix("[[38,9,45,34,21,55,15,31,12,96,36,96,47,69,29,96,74,77,58,58,16,52,23,27,99,65,79,70,53,60,75,42,52,18,87,30,55,69,98,12,9,33,91,41,6,9,17,70,96,28,47,27,12,80,65,76,3,8,87,25,97,62,8,40,97,28,56,51,22,84,86,35,49,76,90,51,59,76,11,66,76,83,45,36,48,88,37,77,65,68,90,44,73,54,76,87,56],[76,72,12,7,66,80,23,73,66,33,11,19,73,3,0,32,37,88,51,66,88,1,86,40,97,14,54,9,66,61,53,98,89,71,70,84,41,31,97,89,70,36,61,61,18,90,96,57,86,80,93,67,56,97,25,81,50,48,56,77,96,51,28,86,32,33,77,63,55,84,67,48,9,59,49,61,2,47,23,66,75,61,74,32,88,44,56,16,76,53,42,54,75,9,0,50,45],[10,56,86,70,54,19,3,6,69,82,3,4,58,8,96,12,6,17,56,52,30,78,52,78,31,80,87,43,27,83,91,2,85,81,7,0,21,5,42,82,76,33,3,6,12,43,31,56,53,11,67,56,39,64,34,24,55,6,79,87,33,27,44,74,32,98,65,40,26,63,48,1,6,82,10,43,57,60,62,36,93,0,25,52,37,84,34,0,57,71,72,89,76,31,95,19,97],[92,40,65,57,67,58,94,93,33,26,55,63,24,42,31,53,36,42,44,21,64,51,95,56,20,46,60,96,36,37,53,86,94,73,61,12,76,28,93,99,1,97,77,57,82,79,38,90,87,30,65,89,67,38,8,78,17,19,16,96,4,85,73,69,42,34,39,5,31,93,39,25,28,26,87,92,6,56,0,29,60,38,25,32,74,31,88,90,42,64,37,60,9,77,99,55,62],[81,39,64,10,18,48,83,24,5,92,10,1,94,70,96,16,97,49,27,96,61,66,31,34,86,95,25,2,42,58,65,75,56,84,60,55,47,59,49,34,26,4,34,54,57,35,28,55,63,25,13,61,29,88,23,87,0,78,86,60,7,11,81,29,21,8,61,25,19,25,19,29,49,75,1,41,32,32,41,97,16,98,27,45,3,62,0,47,66,50,71,58,50,13,56,24,92],[94,20,77,43,57,97,63,55,13,70,99,52,65,43,73,64,14,51,41,22,9,99,35,44,27,37,32,12,96,85,31,99,66,84,50,54,47,50,30,67,54,26,26,64,17,22,81,91,27,84,96,79,8,44,90,58,1,43,90,52,14,86,27,99,64,37,36,66,93,36,15,84,30,16,12,18,20,89,27,70,43,79,2,17,64,52,94,44,96,94,13,7,88,10,84,21,76],[32,31,84,4,86,46,48,21,16,5,8,11,26,0,11,27,47,11,57,61,36,45,47,48,57,32,93,85,40,90,55,26,73,36,63,19,31,54,79,15,43,83,82,98,35,31,84,12,65,32,59,34,67,12,90,25,45,23,5,30,78,88,31,82,14,94,89,91,76,21,19,61,92,84,13,64,34,74,24,40,27,72,47,44,8,90,73,31,37,62,40,6,78,76,36,36,10],[45,47,43,61,93,17,49,64,47,89,33,5,27,51,93,32,4,12,50,71,21,24,38,61,54,78,91,50,40,67,88,54,9,12,81,71,23,26,80,22,76,38,66,53,27,81,30,61,74,67,0,75,19,11,3,50,14,55,21,28,85,38,94,48,35,78,45,92,87,65,26,3,0,55,79,95,90,63,66,61,88,87,7,74,33,58,20,71,27,98,13,53,58,58,86,47,70],[58,52,17,32,58,32,85,50,9,39,69,7,83,75,45,37,49,47,10,83,78,50,84,19,43,42,5,25,24,5,36,54,35,21,77,87,57,24,67,58,71,15,40,16,11,64,8,10,13,59,77,53,53,49,14,48,28,45,76,72,19,33,86,96,15,21,46,64,58,59,62,57,14,38,44,39,10,28,66,77,43,40,25,54,89,98,5,1,43,6,26,68,39,15,86,99,83],[68,59,19,13,18,48,82,66,97,56,77,28,89,12,80,26,57,91,43,61,55,32,11,84,84,22,13,24,23,7,79,30,57,3,48,7,87,29,17,63,27,38,13,81,86,69,39,83,3,75,12,85,58,59,97,4,39,90,90,14,54,89,96,65,49,32,54,95,63,8,18,92,81,97,65,38,31,42,44,69,74,25,21,29,29,98,15,59,69,20,89,62,14,77,63,4,35],[92,50,24,59,17,58,26,98,92,59,61,56,58,49,73,76,33,82,10,1,54,65,57,95,38,4,10,0,50,63,38,59,29,64,76,53,13,56,68,67,0,32,44,8,41,25,55,16,79,50,67,43,87,87,53,95,54,48,48,73,21,12,93,71,93,96,71,91,79,28,27,64,18,76,58,13,40,21,30,68,98,42,23,42,47,94,8,1,1,32,7,47,77,67,2,20,53],[25,99,19,87,83,35,88,28,54,99,14,86,91,47,72,92,2,80,97,85,45,70,44,8,74,3,56,87,27,28,56,81,17,73,83,26,67,79,15,7,64,87,95,56,77,46,69,99,38,49,26,34,21,34,49,73,4,60,78,45,96,49,11,49,34,6,2,32,18,68,74,43,48,62,24,9,95,90,47,29,25,10,11,16,25,25,23,61,27,35,7,90,70,89,17,65,37],[1,55,79,84,74,41,96,31,1,25,85,39,52,93,92,60,8,86,71,29,59,91,48,59,70,25,59,50,22,36,52,97,70,44,93,55,69,23,66,8,6,26,81,99,24,48,49,39,37,42,50,21,71,9,5,20,43,98,10,19,2,19,32,4,69,80,14,9,0,45,53,17,31,87,21,70,53,63,16,90,47,22,97,33,70,99,18,65,13,20,91,97,41,52,80,20,62],[78,65,50,95,34,84,0,35,1,67,41,80,26,61,77,49,56,88,6,75,12,86,23,32,49,9,17,93,7,11,46,94,40,94,0,68,50,17,2,42,22,33,30,17,67,84,55,91,67,60,55,15,74,28,2,84,16,20,26,88,33,18,22,95,41,74,53,85,15,26,31,72,75,75,43,71,47,77,97,77,67,45,77,70,61,70,70,29,0,49,96,94,34,46,35,59,97],[0,64,98,94,5,67,94,80,76,15,47,77,12,87,7,40,86,86,56,86,54,54,60,67,91,27,52,37,77,42,77,96,13,21,49,78,52,97,62,77,36,47,73,10,24,57,26,90,27,4,16,85,13,48,83,12,38,4,42,66,32,12,5,10,72,85,64,53,80,34,74,91,32,70,32,29,67,63,20,1,21,79,27,21,75,62,60,31,87,82,44,98,59,42,63,63,1],[19,27,27,49,2,69,64,39,96,77,87,95,48,91,48,15,9,64,59,80,60,58,47,25,53,5,57,62,71,23,35,77,79,11,57,83,33,87,85,29,53,95,15,93,37,10,69,61,96,12,30,84,0,29,14,53,61,14,62,37,34,54,22,39,9,68,26,98,14,12,11,75,50,56,71,78,38,17,51,84,35,43,78,7,4,94,7,70,23,35,10,39,70,59,76,68,42],[30,3,26,87,52,0,77,38,78,95,80,2,48,7,48,66,56,53,93,46,39,62,53,38,91,56,50,92,61,65,51,33,32,20,47,14,36,98,97,89,89,36,20,47,88,83,63,46,60,76,53,4,37,43,9,39,99,29,96,84,38,97,28,82,87,88,52,40,34,71,41,35,50,6,2,3,19,4,55,70,27,54,97,34,33,18,10,60,78,48,3,25,34,76,96,70,23]]").ResultMatrix("[[0,95],[0,96],[13,0],[13,1],[13,3],[14,1],[14,2],[14,3],[15,1],[15,2],[15,3],[16,0],[16,3]]"))
          .Add(it => it.ParamMatrix("[[6,8,15,4,0,5,2],[11,2,18,0,16,9,19],[18,10,7,6,0,18,2],[16,16,7,9,13,14,18],[17,18,3,2,2,0,16],[1,12,18,9,11,17,3],[14,5,5,14,16,15,13],[15,1,18,8,15,19,4],[16,17,16,10,17,7,4],[8,14,8,7,10,5,11],[6,19,4,10,12,14,10],[10,18,12,3,6,16,12],[2,16,11,19,9,3,1],[9,18,8,7,2,12,15],[10,14,12,1,4,14,12],[13,19,3,3,16,14,2],[7,4,4,3,15,4,18],[12,8,5,11,18,16,11],[10,14,18,15,9,9,5],[8,9,6,15,2,19,5],[14,7,10,9,0,3,6],[11,8,18,5,11,17,9],[4,17,18,15,3,0,11],[19,18,19,15,7,16,17],[7,11,11,7,16,16,0],[13,9,13,1,17,1,19],[12,7,16,1,4,10,12],[2,16,18,19,11,4,9],[7,14,0,4,19,2,11],[1,9,14,9,13,13,16],[9,12,9,6,15,2,6],[7,18,2,4,8,14,14],[18,19,16,14,1,2,3],[2,11,17,11,19,4,6],[1,14,17,9,11,8,9],[0,2,10,1,17,6,16],[8,18,1,10,4,19,8],[14,1,3,15,13,7,2],[12,2,10,3,0,8,6],[1,6,9,17,12,5,12],[3,10,5,13,9,0,17],[11,2,19,8,2,10,8],[2,11,3,8,14,17,11],[10,14,11,13,15,3,16],[8,7,12,19,11,17,2],[3,14,1,14,0,2,15],[3,5,4,13,18,17,8],[14,16,12,2,10,11,15],[16,2,5,12,19,4,6],[9,9,12,9,8,8,2]]").ResultMatrix("[[0,5],[0,6],[1,4],[1,5],[1,6],[2,5],[18,2],[48,0],[49,0],[49,1],[49,2]]"))
          .Add(it => it.ParamMatrix("[[11,2,11,0,15,12,4,15,0,14,11,3,19,11,5,11,18,19,4,3,11,1,9,17,5,2,15,18,11,15],[12,10,8,15,4,7,4,5,7,8,5,12,3,3,10,12,16,15,17,13,13,16,0,0,17,17,11,3,14,0],[8,18,1,6,15,16,14,11,9,11,3,4,17,7,2,16,18,2,0,0,16,18,10,15,14,18,10,19,17,6],[14,17,4,13,13,6,16,1,3,18,18,18,4,1,15,4,0,9,19,3,6,7,19,13,11,11,10,19,3,15],[16,6,19,17,19,17,5,12,6,3,1,0,3,10,13,18,4,3,9,0,1,18,9,15,18,3,4,6,1,15],[1,2,12,9,9,7,17,0,1,14,18,1,5,3,0,7,2,19,7,19,1,11,1,3,2,4,0,3,16,18],[18,10,10,3,12,11,7,8,3,16,7,11,11,12,15,1,13,9,8,17,1,9,7,19,1,14,8,10,18,14],[5,19,9,4,10,14,1,5,11,16,11,3,5,4,19,8,11,16,19,12,6,3,18,16,17,8,11,19,7,14],[0,15,17,11,10,13,19,0,10,3,15,19,3,3,3,4,3,12,17,10,5,16,12,5,5,17,5,17,6,6],[8,19,9,3,13,8,13,17,4,12,13,8,13,12,10,10,16,7,2,8,17,3,7,1,7,16,11,19,13,19],[6,19,6,13,10,5,14,7,3,1,10,6,4,8,15,0,0,2,12,13,14,14,7,5,1,16,15,15,4,7],[7,7,11,14,2,4,14,2,2,0,6,11,15,14,11,13,2,3,14,9,16,3,8,15,2,18,15,15,2,2],[7,5,12,10,14,3,6,9,2,1,2,15,0,4,7,9,7,12,15,9,2,13,7,8,7,9,4,3,5,19],[11,9,1,8,0,15,1,6,5,11,14,19,6,11,0,12,1,6,8,7,0,1,2,9,14,4,5,8,3,16],[8,0,11,5,14,4,19,0,6,8,1,10,13,8,18,6,6,4,5,9,10,14,14,13,12,16,4,3,3,11],[0,9,6,19,16,4,5,10,13,19,8,15,14,7,13,11,17,18,14,18,19,11,0,4,12,11,2,8,17,14],[16,19,16,9,9,14,5,13,7,10,18,6,15,12,12,1,11,16,1,8,1,7,16,7,19,6,12,0,15,0],[2,4,18,15,13,9,4,18,19,5,16,7,10,1,7,7,4,4,10,8,13,15,9,4,16,13,6,3,13,7],[3,11,10,13,6,4,0,13,11,4,5,6,19,13,8,10,8,9,2,4,4,11,12,8,12,15,6,1,10,12],[7,6,19,3,2,14,15,6,9,1,6,14,4,15,13,9,14,7,10,12,17,18,6,4,12,4,1,6,6,12],[15,17,9,15,9,15,9,10,10,11,12,17,2,18,11,0,6,11,14,17,2,13,9,13,3,4,3,1,8,11],[17,13,12,17,4,19,19,7,7,13,19,10,4,16,1,18,14,2,9,18,2,8,3,1,10,9,12,6,2,11],[17,12,6,8,3,16,5,2,16,3,13,3,13,9,11,11,5,12,14,16,3,19,16,16,1,14,5,3,17,19],[1,4,0,3,1,17,5,15,2,19,12,7,18,13,1,0,7,2,9,18,10,18,8,9,13,13,8,10,14,14],[9,14,4,18,10,18,3,9,9,17,16,4,19,7,3,18,7,0,10,13,9,10,11,16,3,5,1,2,16,19],[8,10,13,8,7,2,9,4,16,15,5,4,15,7,9,7,15,2,6,17,14,3,13,3,4,15,13,10,8,16],[17,7,19,19,13,12,6,0,11,4,10,4,1,9,15,9,7,7,14,6,7,18,9,13,6,16,5,2,17,1],[2,7,0,4,8,18,4,11,13,4,11,12,3,18,11,2,4,18,3,3,17,9,18,11,9,15,14,19,7,17],[13,1,15,18,4,12,18,18,15,16,7,17,9,15,11,3,9,7,18,13,3,11,7,19,10,10,7,13,7,19],[17,17,14,3,19,7,1,13,9,3,6,16,10,8,14,8,17,18,12,11,4,11,10,15,9,0,4,12,7,15],[4,4,8,1,7,11,13,4,11,5,18,2,16,11,16,13,0,13,13,12,11,15,8,4,0,3,2,9,8,15],[17,4,13,5,3,17,14,4,7,6,6,11,16,18,2,0,3,12,1,5,12,16,3,14,4,16,5,8,15,9],[5,3,17,17,6,4,19,5,4,6,11,4,14,18,4,19,16,15,1,17,3,8,13,14,16,13,18,19,6,4],[15,0,8,15,6,6,11,8,18,2,4,10,18,16,15,8,1,5,9,13,7,19,12,2,9,18,1,15,12,8],[5,0,18,14,1,8,18,15,5,13,15,7,8,8,9,0,14,12,4,17,2,10,9,7,19,7,19,9,7,1],[7,4,16,16,13,4,3,6,15,11,14,7,3,0,5,15,10,13,18,18,11,6,7,9,19,13,4,2,7,9],[9,14,15,11,14,5,15,1,19,15,3,4,0,10,4,1,2,15,18,15,15,2,9,0,3,10,9,16,4,1],[14,13,17,19,0,13,15,9,16,18,5,6,16,16,6,10,14,15,17,5,9,2,5,11,19,19,11,6,15,14],[17,7,19,6,5,19,10,2,11,17,17,13,16,13,19,4,12,3,4,13,7,9,19,9,12,3,16,8,18,13]]").ResultMatrix("[[0,29],[1,28],[2,27],[2,28],[3,27],[34,2],[35,2],[35,3],[36,1],[36,2],[37,0],[37,2],[37,3],[38,0],[38,2]]"))
          .Add(it => it.ParamMatrix("[[1,2,3,4,5,6,7,8,9,10,11,12,13,14],[52,53,54,55,56,57,58,59,60,61,62,63,64,15],[51,96,97,98,99,100,101,102,103,104,105,106,65,16],[50,95,132,133,134,135,136,137,138,139,140,107,66,17],[49,94,131,160,161,162,163,164,165,166,141,108,67,18],[48,93,130,159,180,181,182,183,184,167,142,109,68,19],[47,92,129,158,179,192,193,194,185,168,143,110,69,20],[46,91,128,157,178,191,196,195,186,169,144,111,70,21],[45,90,127,156,177,190,189,188,187,170,145,112,71,22],[44,89,126,155,176,175,174,173,172,171,146,113,72,23],[43,88,125,154,153,152,151,150,149,148,147,114,73,24],[42,87,124,123,122,121,120,119,118,117,116,115,74,25],[41,86,85,84,83,82,81,80,79,78,77,76,75,26],[40,39,38,37,36,35,34,33,32,31,30,29,28,27]]").ResultMatrix("[[0,13],[1,0],[1,1],[1,2],[1,3],[1,4],[1,5],[1,6],[1,7],[1,8],[1,9],[1,10],[1,11],[1,12],[1,13],[2,0],[2,1],[2,2],[2,3],[2,4],[2,5],[2,6],[2,7],[2,8],[2,9],[2,10],[2,11],[2,12],[2,13],[3,0],[3,1],[3,2],[3,3],[3,4],[3,5],[3,6],[3,7],[3,8],[3,9],[3,10],[3,11],[3,12],[3,13],[4,0],[4,1],[4,2],[4,3],[4,4],[4,5],[4,6],[4,7],[4,8],[4,9],[4,10],[4,11],[4,12],[4,13],[5,0],[5,1],[5,2],[5,3],[5,4],[5,5],[5,6],[5,7],[5,8],[5,9],[5,10],[5,11],[5,12],[5,13],[6,0],[6,1],[6,2],[6,3],[6,4],[6,5],[6,6],[6,7],[6,8],[6,9],[6,10],[6,11],[6,12],[6,13],[7,0],[7,1],[7,2],[7,3],[7,4],[7,5],[7,6],[7,7],[7,8],[7,9],[7,10],[7,11],[7,12],[7,13],[8,0],[8,1],[8,2],[8,3],[8,4],[8,5],[8,6],[8,7],[8,8],[8,9],[8,10],[8,11],[8,12],[8,13],[9,0],[9,1],[9,2],[9,3],[9,4],[9,5],[9,6],[9,7],[9,8],[9,9],[9,10],[9,11],[9,12],[9,13],[10,0],[10,1],[10,2],[10,3],[10,4],[10,5],[10,6],[10,7],[10,8],[10,9],[10,10],[10,11],[10,12],[10,13],[11,0],[11,1],[11,2],[11,3],[11,4],[11,5],[11,6],[11,7],[11,8],[11,9],[11,10],[11,11],[11,12],[11,13],[12,0],[12,1],[12,2],[12,3],[12,4],[12,5],[12,6],[12,7],[12,8],[12,9],[12,10],[12,11],[12,12],[12,13],[13,0],[13,1],[13,2],[13,3],[13,4],[13,5],[13,6],[13,7],[13,8],[13,9],[13,10],[13,11],[13,12],[13,13]]"))
          .Add(it => it.ParamMatrix("[[11,3,2,4,14,6,13,18,1,4,12,2,4,1,16],[5,11,18,0,15,14,6,17,2,17,19,15,12,3,14],[10,2,5,13,11,11,13,19,11,17,14,18,14,3,11],[14,2,10,7,5,11,6,11,15,11,6,11,12,3,11],[13,1,16,15,8,2,16,10,9,9,10,14,7,15,13],[17,12,4,17,16,5,0,4,10,15,15,15,14,5,18],[9,13,18,4,14,6,7,8,5,5,6,16,13,7,2],[19,9,16,19,16,6,1,11,7,2,12,10,9,18,19],[19,5,19,10,7,18,6,10,7,12,14,8,4,11,16],[13,3,18,9,16,12,1,0,1,14,2,6,1,16,6],[14,1,12,16,7,15,9,19,14,4,16,6,11,15,7],[6,15,19,13,3,2,13,7,19,11,13,16,0,16,16],[1,5,9,7,12,9,2,18,6,12,1,8,1,10,19],[10,11,10,11,3,5,12,0,0,8,15,7,5,13,19],[8,1,17,18,3,6,8,15,0,9,8,8,12,5,18],[8,3,6,12,18,15,10,10,12,19,16,7,17,17,1],[12,13,6,4,12,18,18,9,4,9,13,11,5,3,14],[8,4,12,11,2,2,10,3,11,17,14,2,17,4,7],[8,0,14,0,13,17,11,0,16,13,15,17,4,8,3],[18,15,8,11,18,3,10,18,3,3,15,9,11,15,15]]").ResultMatrix("[[0,14],[1,14],[2,14],[3,14],[4,13],[4,14],[5,14],[19,0]]"))
          .Add(it => it.ParamMatrix("[[1]]").ResultMatrix("[[0,0]]"));

    private IList<IList<int>> Solution(Matrix heights)
    {
        var result = new List<IList<int>>();

        var rows = heights.Length;
        var cols = heights[0].Length;

        var pacific = new bool[rows, cols];
        var atlantic = new bool[rows, cols];
        for (int x = 0; x < cols; x++)
        {
            Flow(heights, 0, x, pacific, heights[0][x]);
            Flow(heights, rows - 1, x, atlantic, heights[rows - 1][x]);
        }

        for (int y = 0; y < rows; y++)
        {
            Flow(heights, y, 0, pacific, heights[y][0]);
            Flow(heights, y, cols - 1, atlantic, heights[y][cols - 1]);
        }

        for (int y = 0; y < rows; y++)
        {
            for (int x = 0; x < cols; x++)
            {
                if (atlantic[y, x] && pacific[y, x])
                {
                    result.Add(new[] {y, x});
                }
            }
        }

        return result;
    }

    private void Flow(int[][] heights, int y, int x, bool[,] visited, int previous)
    {
        if (x < 0 || x >= heights[0].Length
         || y < 0 || y >= heights.Length
         || visited[y, x]
         || heights[y][x] < previous)
        {
            return;
        }

        visited[y, x] = true;

        Flow(heights, y, x + 1, visited, heights[y][x]);
        Flow(heights, y, x - 1, visited, heights[y][x]);
        Flow(heights, y + 1, x, visited, heights[y][x]);
        Flow(heights, y - 1, x, visited, heights[y][x]);
    }
}